{
  "main": {
    "id": "36158530ca94399a",
    "type": "split",
    "children": [
      {
        "id": "0e7f2ee03759c1a5",
        "type": "leaf",
        "state": {
          "type": "markdown",
          "state": {
            "file": "Ⅰ_project_005_interface/Ⅱ_002_技术汇总(持续更新)/02 stragy策略模式.md",
            "mode": "source",
            "source": false
          }
        }
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "1fde14943e099181",
    "type": "split",
    "children": [
      {
        "id": "d83534516a49fbef",
        "type": "tabs",
        "children": [
          {
            "id": "5b4b466d8db2079a",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {}
            }
          },
          {
            "id": "29345518bf978237",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "\"import com.consmation.demo.autoconfig.properties.InterfaceProperties;  import com.consmation.demo.exception.CustomException;  import com.consmation.demo.model.enums.AppHttpCodeEnum;  import org.springframework.beans.factory.annotation.Autowired;  import org.springframework.util.ObjectUtils;  import org.springframework.util.StringUtils;  import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;  import javax.servlet.http.HttpServletRequest;  import javax.servlet.http.HttpServletResponse;  import java.net.URL;  import java.util.List;    /**   * @author SaddyFire   * @date 2022/3/28   * @TIME:19:14   */  public class AuthorizationInterceptor extends HandlerInterceptorAdapter {     @Autowired   private InterfaceProperties interfaceProperties;     @Override   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {   //白名单校验   if (ObjectUtils.isEmpty(interfaceProperties) || ObjectUtils.isEmpty(interfaceProperties.getWhiteList())) {   throw new CustomException(AppHttpCodeEnum.SERVER_ERROR);   }   //获取url   StringBuffer requestURL = request.getRequestURL(); //  http://localhost:8888/demo/limit   //校验url   if (StringUtils.isEmpty(requestURL)) {   throw new CustomException(AppHttpCodeEnum.PARAM_REQUIRE);   }   URL url = new URL(requestURL.toString());   String host = url.getHost();   //ip校验   List<String> whiteList = interfaceProperties.getWhiteList();   if (!whiteList.contains(host)) {   throw new CustomException(AppHttpCodeEnum.NO_OPERATOR_AUTH);   }   return super.preHandle(request, response, handler);   }  }\" import com.consmation.demo.autoconfig.properties.InterfaceProperties; import com.consmation.demo.exception.CustomException; import com.consmation.demo.model.enums.AppHttpCodeEnum; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.util.ObjectUtils; import org.springframework.util.StringUtils; import org.springframework.web.servlet.handler.HandlerInterceptorAdapter; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.net.URL; import java.util.List;  /**  * @author SaddyFire  * @date 2022/3/28  * @TIME:19:14  */ public class AuthorizationInterceptor extends HandlerInterceptorAdapter {      @Autowired     private InterfaceProperties interfaceProperties;       @Override     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {         //白名单校验         if (ObjectUtils.isEmpty(interfaceProperties) || ObjectUtils.isEmpty(interfaceProperties.getWhiteList())) {             throw new CustomException(AppHttpCodeEnum.SERVER_ERROR);         }         //获取url         StringBuffer requestURL = request.getRequestURL();  //  http://localhost:8888/demo/limit         //校验url         if (StringUtils.isEmpty(requestURL)) {             throw new CustomException(AppHttpCodeEnum.PARAM_REQUIRE);         }         URL url = new URL(requestURL.toString());         String host = url.getHost();         //ip校验         List<String> whiteList = interfaceProperties.getWhiteList();         if (!whiteList.contains(host)) {             throw new CustomException(AppHttpCodeEnum.NO_OPERATOR_AUTH);         }         return super.preHandle(request, response, handler);     } }",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "5127389d653a6fee",
            "type": "leaf",
            "state": {
              "type": "starred",
              "state": {}
            }
          },
          {
            "id": "cb23f2d60c2c11a2",
            "type": "leaf",
            "state": {
              "type": "empty",
              "state": {}
            }
          },
          {
            "id": "44d59a44762d2fa4",
            "type": "leaf",
            "state": {
              "type": "empty",
              "state": {}
            }
          },
          {
            "id": "ab61ad65bd184215",
            "type": "leaf",
            "state": {
              "type": "file-tree-view",
              "state": {}
            }
          },
          {
            "id": "c86846ffb26b70b6",
            "type": "leaf",
            "state": {
              "type": "recent-files",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 323
  },
  "right": {
    "id": "eaafcc4feb3ef58e",
    "type": "split",
    "children": [
      {
        "id": "8afab52c5050144e",
        "type": "tabs",
        "children": [
          {
            "id": "47df3afa02bd9d58",
            "type": "leaf",
            "state": {
              "type": "empty",
              "state": {}
            }
          },
          {
            "id": "c80cf3aef88f7c8d",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "Ⅰ_project_005_interface/Ⅱ_002_技术汇总(持续更新)/02 stragy策略模式.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": false
              }
            }
          },
          {
            "id": "ff5bc65d102c5c97",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "Ⅰ_project_005_interface/Ⅱ_002_技术汇总(持续更新)/02 stragy策略模式.md"
              }
            }
          },
          {
            "id": "30b538cd0caa3031",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "Ⅰ_project_005_interface/Ⅱ_002_技术汇总(持续更新)/02 stragy策略模式.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          }
        ],
        "currentTab": 2
      }
    ],
    "direction": "horizontal",
    "width": 302.3333435058594,
    "collapsed": true
  },
  "active": "0e7f2ee03759c1a5",
  "lastOpenFiles": [
    "Ⅰ_project_005_interface/Ⅱ_002_技术汇总(持续更新)/02 stragy策略模式.md",
    "Ⅰ_project_005_interface/Ⅱ_002_技术汇总(持续更新)/01 RSA加密_aop元注解.md",
    "Ⅰ_project_005_interface/Ⅱ_001_环境搭建/01 ResponseResult_PageResult.md",
    "Ⅰ_project_005_interface/Ⅱ_001_环境搭建/02 Constants.md",
    "Ⅰ_project_005_interface/Ⅱ_001_环境搭建/03 enums.md",
    "Ⅰ_project_005_interface/Ⅱ_002_技术汇总(持续更新)/03 全局异常.md",
    "Ⅰ_project_005_interface/Ⅱ_002_技术汇总(持续更新)/04 mybatisplus分页插件_自动填充.md",
    "Ⅰ_project_005_interface/Ⅱ_002_技术汇总(持续更新)/05 达梦数据库_数据库密文处理.md",
    "Ⅰ_project_005_interface/Ⅱ_002_技术汇总(持续更新)/06 整合oss_封装OssTemplate.md",
    "Ⅰ_project_005_interface/Ⅱ_002_技术汇总(持续更新)/07 接口限流.md"
  ]
}